Views.py

"""
class CreateDonationView(APIView):

    serializer_class = writeDonationSerializer
    queryset = Donation_blogs.objects.all()
    permission_classes = (permissions.AllowAny, )

    def post(self,request,format=None):
        
        if not self.request.session.exists(self.request.session.session_key):
            self.request.session.create()

        data=request.data
        serializer = self.serializer_class(data=request.data)        
        
        if serializer.is_valid():
            name = data['name']
            write = data['write']
            reason = data['reason']
            description = data['description']
            location = data['location']
            Amount_requested = data['Amount_requested']
            image = data['image']
            category = data['category']

            #,image=img_url
            donation_blog = Donation_blogs(name = name,write=write,description=description
            ,reason=reason,location=location
            ,Amount_requested=Amount_requested
            ,category_id=category
            ,image = image)

            donation_blog.save()
        
        return Response(Donation_blogsSerializer(donation_blog).data,status.HTTP_200_OK)


class UpdateDonationView(APIView):

    serializer_class = writeDonationSerializer
    queryset = Donation_blogs.objects.all()
    permission_classes = (permissions.AllowAny, )

    def post(self,request,format=None):
    
        if not self.request.session.exists(self.request.session.session_key):
            self.request.session.create()

        data=request.data
        serializer = self.serializer_class(data=request.data)
            
        if serializer.is_valid():

            id_target = data['id_target']
            blog = Donation_blogs.objects.get(id=id_target)
                
            # รับค่าจากฟอร์ม
            name = data['name']
            write = data['write']
            reason = data['reason']
            description = data['description']
            location = data['location']
            Amount_requested = data['Amount_requested']
            category = data['category']
            
            # อัปเดตข้อมูล
            blog.name = name
            blog.category_id = category
            blog.description = description
            blog.reason = reason
            blog.location = location
            blog.Amount_requested = Amount_requested

            # อัปเดตภาพปก 
            if  data['image'] :

                datafile =  data['image']

                if str(datafile.content_type).startswith('image') :
                        
                    #ลบรูปภาพ
                    fs = FileSystemStorage()
                    fs.delete(str(blog.image))

                    #แทนที่ภาพใหม่
                    filename = fs.save("blogImages/"+datafile.name,datafile) 
                    img_url = "blogImages/"+datafile.name

                    blog.image = img_url

            blog.save()

        return Response(status.HTTP_200_OK)

class DeleteDonationView(APIView):
    
    serializer_class = writeDonationSerializer
    queryset = Donation_blogs.objects.all()
    permission_classes = (permissions.AllowAny, )


    def post(self,request,format=None):
        
        if not self.request.session.exists(self.request.session.session_key):
            self.request.session.create()

        data=request.data
        serializer = self.serializer_class(data=request.data)
        
        id_target = data['id_target']
        blog = Donation_blogs.objects.get(id=id_target)
        fs = FileSystemStorage()
        fs.delete(str(blog.image))
        blog.delete()

        return Response(status.HTTP_200_OK)
"""

class ManageDonationView(ModelViewSet):

    serializer_class = writeDonationSerializer
    queryset = Donation_blogs.objects.all()
    permission_classes = (permissions.AllowAny, )


    def create(self, request, *args, **kwargs):

        data=request.data
        serializer = self.serializer_class(data=request.data)        
        
        if serializer.is_valid():
            name = data['name']
            write = data['write']
            reason = data['reason']
            description = data['description']
            location = data['location']
            Amount_requested = data['Amount_requested']
            image = data['image']
            category = data['category']

            #,image=img_url
            donation_blog = Donation_blogs(name = name,write=write,description=description
            ,reason=reason,location=location
            ,Amount_requested=Amount_requested
            ,category_id=category
            ,image = image)

            donation_blog.save()

        serializer = writeDonationSerializer(donation_blog)

    def destroy(self, request, *args, **kwargs):
        
        logedin_user = request.user
        if(logedin_user == "admin"):
            car = self.get_object()
            car.delete()
            response_message = {"message": "Item has been deleted"}
        else:
            response_message = {"message": "Not Allowed"}

        return Response(response_message)
        
        return Response(serializer.data)

-----------------------------------------------------------------------

serializer.py

class writeDonationSerializer(serializers.ModelSerializer):

    #image = serializers.ImageField(required=False)

    class Meta:

        model = Donation_blogs
        fields = ('name','write','description','reason','location',
        'Amount_requested','created','category','image')

#'image',

------------------------------------------------------------------------
urls.py


path('manage-donatoin',views.ManageDonationView.as_view()),

